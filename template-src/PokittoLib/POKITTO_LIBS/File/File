#pragma once

#include <cstddef>

#include "./ChaN/ffconf.h"
#include "./ChaN/fileff.h"

void initYAPFS();

class File {
    YAPFS::FIL handle;
public:
    inline static int error;

    File(){
        handle.fs = nullptr;
        initYAPFS();
    }
    
    File(const File&) = delete;
    
    File(File&& other) : handle(other.handle) {
        other.handle.fs = nullptr;
    }
    
    ~File(){
        close();
    }
    
    void close(){
        if(handle.fs){
            f_close(&handle);
            handle.fs = nullptr;
        }
    }
    
    operator bool(){
        return handle.fs;
    }

    File& openRO(const char *name) {
        close();
        error = f_open(&handle, name, FA_READ);
        return *this;
    }
    
    File& openRW(const char *name, bool create, bool append) {
        close();
        error = f_open(&handle, name, FA_READ|FA_WRITE|(create?FA_CREATE_ALWAYS:FA_OPEN_ALWAYS));
        if( !error && append){
            f_lseek(&handle, handle.fsize);
        }
        return *this;
    }
    
    uint32_t size(){
        return handle.fsize;
    }

    uint32_t tell(){
        return f_tell(&handle);
    }
    
    void seek(uint32_t offset){
        f_lseek(&handle, offset);
    }
    
    uint32_t read( void *ptr, uint32_t count ){
        if(!*this) return 0;
        YAPFS::UINT n;
        error = f_read(&handle, ptr, count, &n);
        if(error)
            n = 0;
        return n;
    }

    uint32_t write( const void *ptr, uint32_t count ){
        if(!*this) return 0;
        YAPFS::UINT n;
        error = f_write(&handle, const_cast<void*>(ptr), count, &n);
        if(error)
            n = 0;
        return n;
    }

    template< typename T, size_t S > uint32_t read( T (&data)[S] ){
	    return read( data, sizeof(data) );
    }

    template< typename T, size_t S > uint32_t write( const T (&data)[S] ){
	    return write( data, sizeof(data) );
    }
    
    template< typename T >
    T read(){
        T tmp = {};
        read( (void*) &tmp, sizeof(T) );
        return tmp;
    }

    template< typename T >
    File & operator >> (T &i){
    	read(&i, sizeof(T));
    	return *this;
    }

    template< typename T >
    File & operator << (const T& i){
    	write(&i, sizeof(T));
    	return *this;
    }

    File & operator << (const char *str ){
        uint32_t len = 0;
        while(str[len]) len++;
        write(str, len);
    	return *this;
    }
};

