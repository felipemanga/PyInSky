<!doctype html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>PokittoEmu</title>
    <style>
      body, html {
      font-family: arial;
	  padding: 0;
      position: absolute;
      width: 100%;
      height: 100%;
      margin: 0;
      }

      canvas{
      border: 0px none;
      background-color: black;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
	  margin: auto;
	  pointer-events: none;
      }

      #progress {
      position: absolute;
      bottom: 0;
      width: 100%;
      }

    </style>

    <script>
var callMain = false;
      
document.addEventListener("DOMContentLoaded", function(){
    document.body.addEventListener("dragenter", cancelEvent);
    document.body.addEventListener("dragover", cancelEvent);
    document.body.addEventListener("drop", dropFile);

    document.body.addEventListener("keydown", function(evt){
	if( evt.key == "Escape" ){
            parent.closeEmulator();
            evt.preventDefault();
        }
    })

    let url = location.search.replace(/[^0-9]*/g, '')|0;
    if( url )
        url = `builds/${url}/build.bin`;

    fetch( url )
	.then( rsp => {
	    if( rsp.ok )
		return rsp.arrayBuffer();
	    throw "Could not load bin";
	})
	.then( ab => {

	    retry();

	    function retry(){

		if( typeof FS == "undefined" || !Module.calledRun ){
		    setTimeout( retry, 100 );
		    return;
		}

		var data = new Uint8Array( ab );
		var stream = FS.open('file.bin', 'w+');
		FS.write(stream, data, 0, data.length, 0);
		FS.close(stream);
		if( callMain ){
		    callMain = false;
		    Module.callMain([]);
		}else
		    Module.ccall("reset");

	    }

	})
	.catch( err => console.error(err) );
    
});

function cancelEvent( event ){
    event.stopPropagation();
    event.preventDefault();
}

function dropFile( event ){
    event.stopPropagation();
    event.preventDefault();
    
    var dt = event.dataTransfer;
    var files = dt.files;
    for( var i=0; i<files.length; ++i ){
	var file = files[i];
	if( !/\.bin$/.test(file.name) )
	    continue;

	let fr = new FileReader();
	fr.onload = loadFile.bind( null, fr, file );
	fr.readAsArrayBuffer( file );
	return;
    }

    function loadFile( fr, file ){
	var data = new Uint8Array( fr.result );
	var stream = FS.open('file.bin', 'w+');
	FS.write(stream, data, 0, data.length, 0);
	FS.close(stream);
	if( callMain ){
	    callMain = false;
	    Module.callMain([]);
	}else
	    Module.ccall("reset");
    }

}

    </script>
  </head>
  <body>
    <progress value="0" max="100" id="progress" hidden=1></progress>

    <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()"></canvas>

    <script type='text/javascript'>
      var progressElement = document.getElementById('progress');

      var Module = {
          noInitialRun:true,
          preRun: [],
          postRun: [
	      function(){
		  callMain = true;
	      }
	  ],
	  
          print: parent.Module.print,
          printErr: parent.Module.printErr,
          canvas: document.getElementById('canvas'),
	  
          setStatus: function(text) {
              if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: '' };
              if (text === Module.setStatus.last.text) return;
              var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
              var now = Date.now();
              if (m && now - Module.setStatus.last.time < 30) return; // if this is a progress update, skip it if too soon
              Module.setStatus.last.time = now;
              Module.setStatus.last.text = text;
              if (m) {
		  text = m[1];
		  progressElement.value = parseInt(m[2])*100;
		  progressElement.max = parseInt(m[4])*100;
		  progressElement.hidden = false;
              } else {
		  progressElement.value = null;
		  progressElement.max = null;
		  progressElement.hidden = true;
              }
          },
        totalDependencies: 0,
        monitorRunDependencies: function(left) {
          this.totalDependencies = Math.max(this.totalDependencies, left);
          Module.setStatus(left ? 'Preparing... (' + (this.totalDependencies-left) + '/' + this.totalDependencies + ')' : 'All downloads complete.');
        }
      };
      Module.setStatus('Downloading...');
      window.onerror = function(event) {
        // TODO: do not warn on ok events like simulating an infinite loop or exitStatus
        Module.setStatus('Exception thrown, see JavaScript console');
        Module.setStatus = function(text) {
          if (text) Module.printErr('[post-exception status] ' + text);
        };
      };
    </script>
    <script>
var ASSERTIONS = 0;
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;

	       }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}

          var memoryInitializer = 'PokittoEmu.html.mem';
          memoryInitializer = Module['locateFile'] ? Module['locateFile'](memoryInitializer, '') : memoryInitializer;
          Module['memoryInitializerRequestURL'] = memoryInitializer;
          var meminitXHR = Module['memoryInitializerRequest'] = new XMLHttpRequest();
          meminitXHR.open('GET', memoryInitializer, true);
          meminitXHR.responseType = 'arraybuffer';
          meminitXHR.send(null);

          var script = document.createElement('script');
          script.src = "PokittoEmu.js";
          document.body.appendChild(script);

</script>
  </body>
</html>
